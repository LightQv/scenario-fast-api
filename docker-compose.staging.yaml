services:
  scenario-postgres:
    image: postgres:16-alpine
    container_name: scenario-postgres-staging
    restart: unless-stopped
    ports:
      - "5434:5432"
    volumes:
      - scenario-postgres-staging-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-scenario_staging_db}
      POSTGRES_USER: ${POSTGRES_USER:-scenario_staging_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-scenario_staging_password}
    networks:
      - scenario-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-scenario_staging_user} -d ${POSTGRES_DB:-scenario_staging_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  scenario-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scenario-api-staging
    restart: unless-stopped
    env_file:
      - .env.staging
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scenario_staging_user}:${POSTGRES_PASSWORD:-scenario_staging_password}@scenario-postgres:5432/${POSTGRES_DB:-scenario_staging_db}
    networks:
      - scenario-network
    depends_on:
      scenario-postgres:
        condition: service_healthy

  scenario-nginx:
    image: nginx:alpine
    container_name: scenario-nginx-staging
    restart: unless-stopped
    ports:
      - "8001:80"
    volumes:
      - ./nginx/nginx.staging.conf:/etc/nginx/nginx.conf:ro
    networks:
      - scenario-network
    depends_on:
      - scenario-api

volumes:
  scenario-postgres-staging-data:

networks:
  scenario-network:
    driver: bridge