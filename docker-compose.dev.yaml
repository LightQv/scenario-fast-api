services:
  scenario-postgres:
    image: postgres:16-alpine
    container_name: scenario-postgres-dev
    restart: unless-stopped
    ports:
      - "5433:5432"
    volumes:
      - scenario-postgres-dev-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-scenario_db}
      POSTGRES_USER: ${POSTGRES_USER:-scenario_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-scenario_password}
    networks:
      - scenario-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-scenario_user} -d ${POSTGRES_DB:-scenario_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  scenario-api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: scenario-api-dev
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      - ./app:/scenario/app:ro
      - ./alembic.ini:/scenario/alembic.ini:ro
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scenario_user}:${POSTGRES_PASSWORD:-scenario_password}@scenario-postgres:5432/${POSTGRES_DB:-scenario_db}
    networks:
      - scenario-network
    depends_on:
      scenario-postgres:
        condition: service_healthy

  scenario-adminer:
    image: adminer:4.8.1
    container_name: scenario-adminer-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: scenario-postgres
    networks:
      - scenario-network
    depends_on:
      - scenario-postgres

volumes:
  scenario-postgres-dev-data:

networks:
  scenario-network:
    driver: bridge