name: "scenario-fast-api-prod"

services:
  scenario-postgres:
    image: postgres:16-alpine
    container_name: scenario-postgres-prod
    restart: unless-stopped
    volumes:
      - scenario-postgres-prod-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - scenario-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  scenario-api:
    image: ${DOCKER_REGISTRY:-your-registry}/scenario-api:${API_VERSION:-latest}
    container_name: scenario-api-prod
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@scenario-postgres:5432/${POSTGRES_DB}
    networks:
      - scenario-network
    depends_on:
      scenario-postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  scenario-nginx:
    image: nginx:alpine
    container_name: scenario-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    networks:
      - scenario-network
    depends_on:
      - scenario-api

volumes:
  scenario-postgres-prod-data:

networks:
  scenario-network:
    driver: bridge